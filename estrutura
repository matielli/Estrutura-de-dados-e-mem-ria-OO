class Pilha:
    def __init__(self, max_size):
        self.itens = []
        self.max_size = max_size

    def push(self, item):
        if len(self.itens) < self.max_size:
            self.itens.append(item)
            print(f"Elemento '{item}' adicionado à pilha.")
        else:
            print("Erro: A pilha está cheia! Não é possível adicionar mais elementos.")

    def pop(self):
        if not self.is_empty():
            item = self.itens.pop()
            print(f"Elemento '{item}' removido da pilha.")
            return item
        else:
            print("Erro: A pilha está vazia! Não há elementos para remover.")

    def peek(self):
        if not self.is_empty():
            print(f"Elemento no topo da pilha: '{self.itens[-1]}'.")
            return self.itens[-1]
        else:
            print("Erro: A pilha está vazia! Não há elementos no topo.")

    def is_empty(self):
        return len(self.itens) == 0

    def mostrar_pilha(self):
        print("Estado atual da pilha:", self.itens)



def main():
    max_size = int(input("Digite o tamanho máximo da pilha: "))
    pilha = Pilha(max_size)

    while True:
        print("\nEscolha uma operação:")
        print("1. Push (Adicionar)")
        print("2. Pop (Remover)")
        print("3. Peek (Visualizar Topo)")
        print("4. Sair")
        escolha = input("Digite o número da operação: ")

        if escolha == "1":
            item = input("Digite o elemento para adicionar à pilha: ")
            pilha.push(item)
        elif escolha == "2":
            pilha.pop()
        elif escolha == "3":
            pilha.peek()
        elif escolha == "4":
            print("Saindo...")
            break
        else:
            print("Opção inválida! Tente novamente.")

        pilha.mostrar_pilha()

if __name__ == "__main__":
    main()
